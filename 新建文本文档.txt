<template>
  <div class="configuration-details">
    <common-header></common-header>
    <div class="configuration-details-container">
      <div class="details-container">
        <aui-breadcrumb>
          <aui-breadcrumb-item>我的工作台</aui-breadcrumb-item>
          <aui-breadcrumb-item>
            <span @click="cancel">财报指标映射模板</span>
          </aui-breadcrumb-item>
          <aui-breadcrumb-item>
            {{ $route.query.detailStatus | getFormStatusText }}
          </aui-breadcrumb-item>
        </aui-breadcrumb>
        <div class="details">
          <div class="title">
            {{ $route.query.detailStatus | getFormStatusText }}
          </div>
          <div class="detail-modules">
            <basic-information
              id="basicInformation"
              ref="basicInformationRef"
              :editabled="editabled"
            ></basic-information>
            <div class="module">
              <div class="module-name">
                指标映射关系
                <div v-if="editabled" class="module-information">
                  注：解析财报支持的文件格式：图片、pdf；上传文件大小：200M以内；不支持压缩包文件和加密文件；
                </div>
                <aui-Search
                  v-else
                  v-model="indicatorVal"
                  class="search-input"
                  clearable
                  placeholder="请输入指标名称"
                  is-enter-search
                  @keyup.enter.native="fetchData"
                  @search="fetchData"
                >
                </aui-Search>
              </div>
            </div>
            <indicator-mapping
              id="indicatorMapping"
              ref="indicatorMappingRef"
            ></indicator-mapping>
            <indicator-rules
              id="indicatorRules"
              :rules="indicatorRuleList"
              :editabled="editabled"
            ></indicator-rules>
          </div>
        </div>
      </div>
      <div class="details-footer">
        <aui-button
          v-show="receiving"
          :reset-time="0"
          type="primary"
          @click="receivingData"
          >接收</aui-button
        >
        <aui-button
          v-show="editabled"
          :reset-time="0"
          type="primary"
          @click="saveData(1)"
          >完成</aui-button
        >
        <aui-button v-show="editabled" :reset-time="0" @click="saveToDraftData"
          >保存草稿</aui-button
        >
        <aui-button
          v-show="!editabled && !receiving"
          :reset-time="0"
          @click="openEditor"
          >编辑</aui-button
        >
        <aui-button :reset-time="0" @click="cancel">{{
          editabled ? '取消' : '返回'
        }}</aui-button>
      </div>
    </div>

    <aui-dialog-box
      class="save-confirm-dialog"
      :visible="saveConfirmBoxVisible"
      title="提示"
      width="30%"
      top="40%"
      @update:visible="saveConfirmBoxVisible = $event"
    >
      <div class="prompt-title">
        <icon-help-solid class="prompt-icon"></icon-help-solid>
        是否需要对当前页的编辑更新进行保存
      </div>
      <div class="prompt-subtitle">
        若不保存，当前页编辑数据将会丢失<br />
        {{
          templateStatus
            ? '若保存，本模板将从“完成状态”保存为“草稿状态”，其他用户将不能使用该模板'
            : ''
        }}
      </div>
      <template #footer>
        <aui-button type="primary" @click="saveData(0, true)">保存</aui-button>
        <aui-button @click="saveCancel">不保存</aui-button>
      </template>
    </aui-dialog-box>
    <aui-dialog-box
      class="save-confirm-dialog"
      :visible="saveToDraftConfirmBoxVisible"
      title="提示"
      width="30%"
      top="40%"
      @update:visible="saveToDraftConfirmBoxVisible = $event"
    >
      <div class="prompt-title">
        <icon-help-solid class="prompt-icon"></icon-help-solid>
        本模板将从“完成状态”保存为“草稿状态”
      </div>
      <div class="prompt-subtitle">若确定，其他用户将不能使用该模板</div>
      <template #footer>
        <aui-button type="primary" @click="saveData(0)">确定</aui-button>
        <aui-button @click="saveCancel">取消</aui-button>
      </template>
    </aui-dialog-box>
  </div>
</template>
<script>
import {
  Breadcrumb,
  BreadcrumbItem,
  Button,
  DialogBox,
  Modal,
  Search
} from '@aurora/vue'
import { IconHelpSolid } from '@aurora/vue-icon'
import BasicInformation from '@/components/workbench/template-configuration/BasicInformation'
import IndicatorMapping from '@/components/workbench/template-configuration/IndicatorMapping'
import IndicatorRules from '@/components/workbench/template-configuration/IndicatorRules'
import { mapMutations, mapGetters, mapActions } from 'vuex'
import {
  utils as materialsUtils,
  runRulesValidate
} from '@/store/modules/configuration-details'
import { createQueryBus } from '@/mixins/query'
import { uniqWith, isEqual, forIn, cloneDeep } from 'lodash'
import CommonHeader from '@/components/home/CommonHeader.vue'

export default {
  components: {
    AuiBreadcrumb: Breadcrumb,
    AuiBreadcrumbItem: BreadcrumbItem,
    AuiDialogBox: DialogBox,
    IconHelpSolid: IconHelpSolid(),
    AuiButton: Button,
    BasicInformation,
    IndicatorMapping,
    IndicatorRules,
    CommonHeader,
    AuiSearch: Search
  },
  filters: {
    getFormStatusText(status) {
      return (
        {
          read: '查看模板',
          add: '新增模板',
          edit: '编辑模板',
          receiving: '接收模板'
        }[status] || '查看模板'
      )
    }
  },
  mixins: [
    createQueryBus({
      basicInformationTempID: null,
      detailStatus: null
    })
  ],
  data() {
    return {
      received: false,
      saveConfirmBoxVisible: false,
      originalData: null,
      saveToDraftConfirmBoxVisible: false,
      indicatorVal: ''
    }
  },
  computed: {
    ...mapGetters([
      'indicatorRuleList',
      'basicInformation',
      'indicatorMappingList',
      'permission',
      'ipaPortalDeleteRuleIds',
      'ipaPortalDeleteRelationIds'
    ]),
    detailStatus() {
      return this.$route.query.detailStatus
    },
    editabled() {
      return this.detailStatus === 'add' || this.detailStatus === 'edit'
    },
    receiving() {
      return this.detailStatus === 'receiving'
    },
    templateStatus() {
      return (
        parseInt(this.basicInformation?.template_status) &&
        this.basicInformation?.template_type === '公共'
      )
    }
  },
  watch: {
    indicatorMappingList: {
      handler(val) {
        this.setIndicatorOptions(this.initIndicatorOptions(val))
      },
      immediate: true,
      deep: true
    },
    $route: {
      async handler(val) {
        const hasPermission = await this.getUserPermission(
          this.$service.base.getEnvInfoSync().user.validRoles
        )
        if (!hasPermission) this.toErrorPage()
        else {
          const { detailStatus, basicInformationTempID } = val.query
          if (detailStatus && !this.permission[detailStatus]) this.toErrorPage()
          else if (basicInformationTempID) {
            await this.getTemplateDetail(basicInformationTempID)
            // 1.没有完成的表单，并且所属人不是自己，无权限查看分享
            const noComplete =
              this.basicInformation?.template_status === '0' &&
              !(await this.isOwnerPage())
            // 2.公共 （无publicTemplateOwner权限，无法进行修改）
            const noPublicPermission =
              this.basicInformation?.template_type === '公共' &&
              detailStatus === 'edit' &&
              !this.permission['publicTemplateOwner']
            // 3.个人 （能修改查看自己的）
            const noOwnerPermission =
              this.basicInformation?.template_type === '个人' &&
              detailStatus !== 'add' &&
              detailStatus !== 'receiving' &&
              !(await this.isOwnerPage())
            if (noComplete || noPublicPermission || noOwnerPermission)
              this.toErrorPage()
          } else {
            // 添加模板时，没有公共模板权限的默认选择个人
            this.initDetail(
              !this.permission['publicTemplateOwner'] && detailStatus === 'add'
                ? '个人'
                : '公共'
            )
          }
        }
        this.originalData = cloneDeep(this.getSaveFinalData())
      },
      immediate: true,
      deep: true
    },
    editabled(newVal) {
      if (!newVal) {
        this.indicatorVal = ''
      }
    },
    indicatorVal(newVal) {
      if (newVal === '') {
        this.fetchData()
      }
    }
  },
  methods: {
    ...mapMutations([
      'setRules',
      'setRulesValidator',
      'setIndicatorOptions',
      'setBasicInformation',
      'setDetailStatus',
      'setBasicInformationTempID',
      'updateBasicInformation'
    ]),
    ...materialsUtils,
    ...mapActions([
      'createIpaFinancialReportTemplate',
      'getTemplateDetail',
      'updateIpaFinancialReportTemplate',
      'getUserPermission'
    ]),

    toErrorPage() {
      this.$router.push('/errors/403')
    },

    // 判断是否是表单所属人
    async isOwnerPage() {
      return (
        this.basicInformation?.created_by ===
        this.$service.base.getUserInfoSync()['employeeNumber']
      )
    },

    cancel() {
      if (!isEqual(this.originalData, this.getSaveFinalData()))
        this.saveConfirmBoxVisible = true
      else this.backToListRouter()
    },

    saveCancel() {
      if (this.saveToDraftConfirmBoxVisible) {
        this.saveToDraftConfirmBoxVisible = false
        return
      }
      this.backToListRouter()
    },

    backToListRouter() {
      this.$router.replace({ path: '/workbench/template-configuration' })
    },

    saveToDraftData() {
      if (!this.templateStatus) this.saveData(0)
      else this.saveToDraftConfirmBoxVisible = true
    },

    async saveData(template_status, changeRouter) {
      const saveValid = await this.saveValidate()
      if (template_status === 1 && !saveValid.value) {
        this.scrollToErrorModule(saveValid.errorModules)
        this.modalMessage('保存失败', 'error')
        this.saveConfirmBoxVisible = false
        return
      }
      const res = await this.toSaveData(template_status)
      if ((res.status && res.data) || res === 1) {
        this.setDetailStatus('')
        if (res.status && res.data)
          this.setBasicInformation(res.data.ipaFinancialReportTemplateVO)
        const successMsg = template_status === 1 ? '提交成功' : '保存成功'
        this.modalMessage(successMsg)
        if (changeRouter || template_status === 1) this.backToListRouter()
      } else {
        this.modalMessage('保存失败', 'error')
      }
      this.saveConfirmBoxVisible = false
      this.saveToDraftConfirmBoxVisible = false
    },

    modalMessage(msg = '保存成功', status = 'success') {
      Modal.message({
        width: 135,
        top: 65,
        message: msg,
        status: status,
        duration: '2000',
        id: 'unique'
      })
    },

    getSaveFinalData(template_status) {
      return {
        ipaFinancialReportTemplateVO: {
          ...this.basicInformation,
          template_status: template_status
        },
        ipaFinancialReportRelationVO:
          this.getNonEmptyIndicator(template_status),
        ipaFinancialReportRuleVO: this.getRuleBody(),
        ipaPortalDeleteRelationIds:
          this.ipaPortalDeleteRelationIds.length > 0
            ? this.ipaPortalDeleteRelationIds
            : [0],
        ipaPortalDeleteRuleIds:
          this.ipaPortalDeleteRuleIds.length > 0
            ? this.ipaPortalDeleteRuleIds
            : [0]
      }
    },
    getNonEmptyIndicator(template_status) {
      // 保存需将新增的指标 倒序并且拼接在 旧数据的前面 传给后台，才能保证数据保存时的顺序和后台返回的数据顺序正常
      const isAddIndicator = this.indicatorMappingList.filter(
        (indicator) => !indicator.relation_id
      )
      const isOldIndicator = this.indicatorMappingList.filter(
        (indicator) => !!indicator.relation_id
      )
      const indicatorList = isAddIndicator.reverse().concat(isOldIndicator)
      if (template_status === 1) {
        // 点击完成 清除映射后的指标为空的数据
        this.$refs.indicatorMappingRef?.clearEmptyIndicator()
        return indicatorList.filter(
          (indicator) => !!indicator.new_financial_index
        )
      }
      return indicatorList
    },
    async toSaveData(template_status) {
      // 去掉原来的await
      // return this.detailStatus === 'add' ? await this.createIpaFinancialReportTemplate({data: this.getSaveFinalData(template_status)})
      // : await this.updateIpaFinancialReportTemplate({data: this.getSaveFinalData(template_status)})
      return this.detailStatus === 'add'
        ? this.createIpaFinancialReportTemplate({
          data: this.getSaveFinalData(template_status)
        })
        : this.updateIpaFinancialReportTemplate({
          data: this.getSaveFinalData(template_status)
        })
    },

    receivingData() {
      this.received = true
      this.setDetailStatus('add')
    },

    openEditor() {
      this.setDetailStatus('edit')
    },

    async saveValidate() {
      let errorModules = []
      this.setRulesValidator({})
      let basicValid = true
      await this.$refs.basicInformationRef.$refs.basicInformationFormRef.validate(
        (valid) => {
          basicValid = valid
        }
      )
      const ruleValid = this.ruleHasUpdate()
        ? runRulesValidate().validate
        : true
      const indicatorMappingValid =
        this.$refs.indicatorMappingRef?.indicatorMappingValidate()
      if (!basicValid) errorModules.push('basicInformation')
      if (!indicatorMappingValid) errorModules.push('indicatorMapping')
      if (!ruleValid) {
        this.setRulesValidator(runRulesValidate())
        errorModules.push('indicatorRules')
      }
      return {
        value: basicValid && ruleValid && indicatorMappingValid,
        errorModules
      }
    },

    // 滚动到未通过校验的第一个异常位置
    scrollToErrorModule(errorModules) {
      if (errorModules && errorModules[0])
        document.getElementById(errorModules[0])?.scrollIntoView({
          behavior: 'smooth'
        })
    },

    initIndicatorOptions(indicatorMappingList) {
      return uniqWith(
        indicatorMappingList.flatMap((item) => {
          if (!item.new_financial_index) return []
          return {
            label: `${item.new_financial_index}`,
            value: JSON.stringify({
              new_financial_index: String(item['new_financial_index']),
              table_name: String(item['table_name'])
            })
          }
        }),
        isEqual
      )
    },
    fetchData() {
      this.$refs.indicatorMappingRef?.fetchData(this.indicatorVal)
    }
  }
}
</script>